import os
import socket
gettext = lambda s: s
DATA_DIR = os.path.dirname(os.path.dirname(__file__))
"""
Django settings for zenaskigroup project.

Generated by 'django-admin startproject' using Django 1.8.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SILENCED_SYSTEM_CHECKS = ["fields.W342"]


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*t&jdu(o2$=0m*bl1j5*k_5rfpdk)&btsx0fm&u==1dx=tg30a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = socket.gethostname() in ('homer', 'viper2', 'bart')

ALLOWED_HOSTS = ['*']

DATETIME_FORMAT = 'd/m/Y H:i'
DATE_FORMAT = 'd/m/Y'

# Application definition
ROOT_URLCONF = 'zenaskigroup.urls'
WSGI_APPLICATION = 'zenaskigroup.wsgi.application'


# PayPal settings
# ================
PAYPAL_URL = 'https://www.sandbox.paypal.com'
PAYPAL_BUSINESS_ID = "CGSM9YV3BSKZY"


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'it'

TIME_ZONE = 'Europe/Rome'

USE_I18N = True

USE_L10N = False

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(DATA_DIR, 'media')
STATIC_ROOT = os.path.join(DATA_DIR, 'static')

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'zenaskigroup', 'static'),
)
SITE_ID = 1


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'zenaskigroup', 'templates'),],
        'OPTIONS': {
            'debug': DEBUG,
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.core.context_processors.i18n',
                'django.core.context_processors.debug',
                'django.core.context_processors.request',
                'django.core.context_processors.media',
                'django.core.context_processors.csrf',
                'django.core.context_processors.tz',
                'sekizai.context_processors.sekizai',
                'django.core.context_processors.static',
                'cms.context_processors.cms_settings',
                'zenaskigroup.utils.additional_context',
            ],
            'loaders': [
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
                'django.template.loaders.eggs.Loader'
            ],
        },
    },
]


MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'request_logging.middleware.LoggingMiddleware',
    'cms.middleware.user.CurrentUserMiddleware',
    'cms.middleware.page.CurrentPageMiddleware',
    'cms.middleware.toolbar.ToolbarMiddleware',
    'cms.middleware.language.LanguageCookieMiddleware',
    'zenaskigroup.utils.UserTracebackMiddleware',
)


INSTALLED_APPS = (
    ## 'djangocms_admin_style',

    ## 'flat_responsive',
    ## 'flat',

    ## 'bootstrap_admin',

    # this looks the best on mobile phone, but you need to use StackedInline
    # instead of TabularInline
    'jet',  

    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.admin',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'django.contrib.staticfiles',
    'django.contrib.messages',
    'cms',
    'menus',
    'sekizai',
    'treebeard',

    # <django-filer>
    'easy_thumbnails',
    'filer',
    'mptt',
    'cmsplugin_filer_file',
    'cmsplugin_filer_folder',
    'cmsplugin_filer_link',
    'cmsplugin_filer_image',
    'cmsplugin_filer_teaser',
    'cmsplugin_filer_video',
    # </django-filer>
    
    'djangocms_text_ckeditor',
    'djangocms_style',
    'djangocms_column',
    'djangocms_file',
    'djangocms_flash',
    'djangocms_googlemap',
    'djangocms_inherit',
    'djangocms_link',
    'djangocms_picture',
    'djangocms_teaser',
    'djangocms_video',
    'reversion',
    'paypal.standard.ipn',
    'zenaskigroup',
    'trips',
    'registration'
)

LANGUAGES = (
    ## Customize this
#    ('en', gettext('en')),
    ('it', gettext('it')),
)

CMS_LANGUAGES = {
    ## Customize this
    'default': {
#        'fallbacks': ['en', 'it'],
        'public': True,
        'hide_untranslated': False,
        'redirect_on_fallback': True,
    },
    1: [
        {
            'public': True,
            'code': 'it',
            'hide_untranslated': False,
            'name': gettext('Italiano'),
            'redirect_on_fallback': True,
        },
        ## {
        ##     'public': True,
        ##     'code': 'en',
        ##     'hide_untranslated': False,
        ##     'name': gettext('en'),
        ##     'redirect_on_fallback': True,
        ## },
    ],
        
}

CMS_TEMPLATES = (
    ## Customize this
    ('page.html', 'Page'),
    ('feature.html', 'Page with Feature'),
    ('thumbnail.html', 'Page with Thumbnail'),
    ('home.html', 'Home Page'),
)

CMS_PERMISSION = True

CMS_PLACEHOLDER_CONF = {}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'HOST': 'localhost',
        'NAME': os.path.join(BASE_DIR, 'project.db'),
        'PASSWORD': '',
        'PORT': '',
        'USER': '',

        'TEST': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'testing', 'tests.db'),
        }
    }
}

MIGRATION_MODULES = {
    'djangocms_flash': 'djangocms_flash.migrations_django',
    'djangocms_file': 'djangocms_file.migrations_django',
    'djangocms_inherit': 'djangocms_inherit.migrations_django',
    'djangocms_column': 'djangocms_column.migrations_django',
    'djangocms_video': 'djangocms_video.migrations_django',
    'djangocms_picture': 'djangocms_picture.migrations_django',
    'djangocms_googlemap': 'djangocms_googlemap.migrations_django',
    'djangocms_style': 'djangocms_style.migrations_django',
    'djangocms_teaser': 'djangocms_teaser.migrations_django'
}


# django-registration-redux settings
ACCOUNT_ACTIVATION_DAYS = 7 # One-week activation window; you may, of course,
                            # use a different value.
REGISTRATION_AUTO_LOGIN = True # Automatically log the user in.

THUMBNAIL_HIGH_RESOLUTION = True
THUMBNAIL_PROCESSORS = (
    'easy_thumbnails.processors.colorspace',
    'easy_thumbnails.processors.autocrop',
    #'easy_thumbnails.processors.scale_and_crop',
    'filer.thumbnail_processors.scale_and_crop_with_subject_location',
    'easy_thumbnails.processors.filters',
)

# ==============
# email settings
# ==============

DEFAULT_FROM_EMAIL = 'Zena Ski Group <mail@zenaskigroup.it>'
ADMIN_EMAIL = 'anto.cuni@gmail.com'
ADMINS = [('Antonio Cuni', ADMIN_EMAIL)]
EMAIL_BACKEND = 'zenaskigroup.mymail.EmailBackend'
SERVER_EMAIL = 'mail@zenaskigroup.it' # this is the sender of error messages

if DEBUG:
    NULLMAILER_SPOOLDIR = '/tmp/spool/nullmailer'


BOOTSTRAP_STYLES = [
    dict(name='Success Alert', element='div', attributes={'class': 'alert alert-success'}),
    dict(name='Info Alert', element='div', attributes={'class': 'alert alert-info'}),
    dict(name='Warning Alert', element='div', attributes={'class': 'alert alert-warning'}),
    dict(name='Danger Alert', element='div', attributes={'class': 'alert alert-danger'}),

    dict(name='Default Label', element='span', attributes={'class': 'label label-default'}),
    dict(name='Primary Label', element='span', attributes={'class': 'label label-primary'}),
    dict(name='Success Label', element='span', attributes={'class': 'label label-success'}),
    dict(name='Info Label', element='span', attributes={'class': 'label label-info'}),
    dict(name='Warning Label', element='span', attributes={'class': 'label label-warning'}),
    dict(name='Danger Label', element='span', attributes={'class': 'label label-danger'}),

    dict(name='Muted Text', element='span', attributes={'class': 'text-muted'}),
    dict(name='Primary Text', element='span', attributes={'class': 'text-primary'}),
    dict(name='Success Text', element='span', attributes={'class': 'text-success'}),
    dict(name='Info Text', element='span', attributes={'class': 'text-info'}),
    dict(name='Warning Text', element='span', attributes={'class': 'text-warning'}),
    dict(name='Danger Text', element='span', attributes={'class': 'text-danger'}),

    dict(name='Primary Background', element='span', attributes={'class': 'bg-primary'}),
    dict(name='Success Background', element='span', attributes={'class': 'bg-success'}),
    dict(name='Info Background', element='span', attributes={'class': 'bg-info'}),
    dict(name='Warning Background', element='span', attributes={'class': 'bg-warning'}),
    dict(name='Danger Background', element='span', attributes={'class': 'bg-danger'}),
]
    
     
CKEDITOR_SETTINGS = {
    'contentsCss': "/static/css/bootstrap.flatly.min.css",
    'stylesSet': BOOTSTRAP_STYLES,
}


# LOGGING
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        # Include the default Django email handler for errors
        # This is what you'd get without configuring logging at all.
        'mail_admins': {
            'class': 'django.utils.log.AdminEmailHandler',
            'level': 'ERROR',
             # But the emails are plain text by default - HTML is nicer
            'include_html': True,
        },
        # Log to a text file that can be rotated by logrotate
        'logfile': {
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': os.path.join(BASE_DIR, 'django.log'),
        },
    },
    'loggers': {
        # Again, default Django configuration to email unhandled exceptions
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'INFO',
            'propagate': True,
        },
        # Might as well log any errors anywhere else in Django
        'django': {
            'handlers': ['logfile'],
            'level': 'INFO',
            'propagate': False,
        },
        # Your own app - this assumes all your logger names start with "myapp."
        'zenaskigroup': {
            'handlers': ['logfile'],
            'level': 'INFO', # Or maybe INFO or DEBUG
            'propagate': False
        },
    },
}
